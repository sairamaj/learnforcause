@page "/addstudentpoints/{id}/{name}"
@using SelfService.Shared
@using System.Linq
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IMatToaster Toaster
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@if(error != null){
    <ErrorComponent Error=@error />
}

else if (studentHomeworkPoints == null){
    <span><em>Loading...</em></span>
}
else{
<h4>Student: @Name</h4>
<MatButton Raised="true" OnClick="@OnUpdate" style="float: left">Update</MatButton>
<MatButton Raised="true" OnClick="@OnBackToManageStudents" style="float: right">Back to Manage Homework</MatButton>
<MatTable Items="@studentHomeworkPoints" class="mat-elevation-z5" ShowPaging=false PageSize=50 Striped=true>
            <MatTableRow>
                <td><MatCheckbox 
                @bind-Value="@context.IsDone" 
                @onclick="@(e => OnClick(@context))"
                Label="@(getLabel(@context))"
                @onchange="@OnChange"
                ></MatCheckbox></td>
                <td>@context.HomeworkPoint.Description</td>
                <td>@context.HomeworkPoint.NumberofPoints</td>
            </MatTableRow>
        </MatTable>
}

@code
{
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string Name { get; set; }
    string error;
    IEnumerable<StudentHomeworkPoint> studentHomeworkPoints;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get all home works ids
            var homeworkIds = await Http.GetFromJsonAsync<IEnumerable<string>>($"admin/student/homeworkpoints/{Id}");
            studentHomeworkPoints = (await Http.GetFromJsonAsync<IEnumerable<SelfService.Shared.HomeworkPoint>>("admin/homeworkpoints"))
                .OrderBy(s => s.NumberId)
                .Select(s =>
                {
                    var homeworkPoint = new StudentHomeworkPoint
                    {
                        HomeworkPoint = s
                    };

                    homeworkPoint.IsDone = homeworkIds.FirstOrDefault(id => id == s.Id) != null;
                    return homeworkPoint;
                });
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (System.Exception e)
        {
            error = e.Message;
        }
    }

    string getLabel(StudentHomeworkPoint info)
    {
        System.Console.WriteLine($"val: {info.HomeworkPoint.Description} {info.IsDone}");
        return !info.IsDone ? "Not done" : "Done";
    }

    void OnChange(ChangeEventArgs e)
    {
        System.Console.WriteLine("On Change...");
    }

    void OnClick(StudentHomeworkPoint info)
    {
        studentHomeworkPoints = studentHomeworkPoints.Select(s =>
        {
            if (s.HomeworkPoint.Id == info.HomeworkPoint.Id)
            {
                s.IsDone = !info.IsDone;
            }

            return s;
        });
    }

    async Task OnUpdate()
    {
        try
        {
            var doneHomeworkIds = studentHomeworkPoints.Where(s => s.IsDone).Select(s => s.HomeworkPoint.Id);
            await Http.PostAsJsonAsync<IEnumerable<string>>($"admin/student/homeworkpoints/{Id}", doneHomeworkIds);
            Toaster.Add("Updated successfully.", MatToastType.Success);

            // Remove to get fresh update.            
            var profileKey = $"admin/students/profile/{Id}";
            await localStorage.RemoveItemAsync(profileKey);
            NavigationManager.NavigateTo("managestudentshomework");
        }
        catch (System.Exception e)
        {
            Toaster.Add(e.Message, MatToastType.Danger);
            error = e.Message;
        }
    }

    async Task OnBackToManageStudents()
    {
        await Task.Delay(0);
        NavigationManager.NavigateTo("managestudentshomework");
    }
}

 