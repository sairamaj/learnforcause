@page "/admin"

@using SelfService.Shared
@using System.Linq
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient Http

@attribute [Microsoft.AspNetCore.Authorization.Authorize()]

<MatButton Raised="true" OnClick="@GetRunningClass" style="float: center">Get Running Class</MatButton>
@if( currentRunningClass != null){
    <span>id:</span> <span>@currentRunningClass.Id</span><br/>
    <span>ClassName>:</span> <span>@currentRunningClass.ClassName</span><br/>
    <span>DateTime:</span> <span>@currentRunningClass.DateTime</span><br/>
}else{
    <span>No class found!</span>
}
<br/>
<br/>
<MatButton Raised="true" OnClick="@StartClass" style="float: center">Start Class</MatButton>
<br/>
<br/>
<MatButton Raised="true" OnClick="@StopClass" style="float: center">Stop Class</MatButton>
@if(!String.IsNullOrWhiteSpace(error))
{
    @error
}

<br/>
<MatButton Raised="true" OnClick="@GetClasses" style="float: center">Get Classes</MatButton>
<br/>
<MatButton Raised="true" OnClick="@GetHomeworkPoints" style="float: center">Get Homework points</MatButton>
<br/>

<StudentComponent />

@if (classes != null){
<MatTable Items="@classes" class="mat-elevation-z5" ShowPaging=false PageSize=20 Striped=true>
            <MatTableRow>
                <td>@context.ClassName</td>
                <td>@context.DateTime</td>
            </MatTableRow>
        </MatTable>
}

@if (homeworkpoints != null){
<MatTable Items="@homeworkpoints" class="mat-elevation-z5" ShowPaging=false PageSize=20 Striped=true>
            <MatTableRow>
                <td>@context.Description</td>
                <td>@context.NumberofPoints</td>
            </MatTableRow>
        </MatTable>
}

@code
{
    CurrentRunningClassInfo currentRunningClass;
    string error = null;
    IEnumerable<SelfService.Shared.ClassInfo> classes;
    IEnumerable<SelfService.Shared.HomeworkPoint> homeworkpoints;

    async Task GetRunningClass()
    {
        currentRunningClass = null;
        try
        {
            currentRunningClass = await Http.GetFromJsonAsync<CurrentRunningClassInfo>("program/class/current");
        }
        catch (Exception e)
        {
            // Ignore for now.
            System.Console.WriteLine($"Error: {e}");
        }
    }

    async Task StartClass()
    {
        try
        {
            var response = await Http.PostAsync($"admin/class/start/java", new StringContent(""));
            response.EnsureSuccessStatusCode();
            await GetRunningClass();
        }
        catch (Exception e)
        {
            error = e.Message;
        }
    }

    async Task StopClass()
    {
        try
        {
            var response = await Http.PostAsync($"admin/class/stop/{currentRunningClass.Id}", new StringContent(""));
            response.EnsureSuccessStatusCode();
            await GetRunningClass();
        }
        catch (Exception e)
        {
            error = e.Message;
        }
    }

    async Task GetClasses()
    {
        try
        {
            classes = (await Http.GetFromJsonAsync<IEnumerable<SelfService.Shared.ClassInfo>>("admin/classes"))
                .OrderByDescending(s => s.DateTime);
        }
        catch (System.Exception e)
        {
            error = e.Message;
        }
    }

    async Task GetHomeworkPoints()
    {
        try
        {
            homeworkpoints = (await Http.GetFromJsonAsync<IEnumerable<SelfService.Shared.HomeworkPoint>>("admin/homeworkpoints"))
                .OrderBy(s => s.Description);
        }
        catch (System.Exception e)
        {
            error = e.Message;
        }
    }
}