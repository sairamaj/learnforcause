@using SelfService.Shared
@using System.Linq
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IMatToaster Toaster

@if( error != null){
    <ErrorComponent Error=@error />
}
@if (students == null){
    <em>Loading Students...</em>
}
else{
        <MatButton OnClick="@Refresh" style="float: right">Refresh</MatButton>
        <br/><br/>
        <MatAccordion Multi="true">
            @foreach(var student in students){
                <MatExpansionPanel>
                    <MatExpansionPanelSummary>
                        <MatExpansionPanelHeader>@student.Name</MatExpansionPanelHeader>
                    </MatExpansionPanelSummary>
                    <MatExpansionPanelDetails>
                        @* <MatButton OnClick="@(e => RefreshStudentProfile(@student.Id))" style="float: right">Refresh</MatButton> *@
                        @* <MatButton OnClick="@(e => AddPointsToStudent(@student.Id,@student.Name))" style="float: right">Add/View Points</MatButton> *@
                        <ProfileView Profile="@student.Profile" />
                    </MatExpansionPanelDetails>
                </MatExpansionPanel>            
            }         
        </MatAccordion>
}

@code {
    IEnumerable<SelfService.Shared.Student> students;
    AddStudentPoints addStudentPoints = new AddStudentPoints();

    string error = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Load();
        }
        catch (Microsoft.AspNetCore.Components.WebAssembly.Authentication.AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

    }

    async Task Refresh(){
        try
        {
            Toaster.Add("Refresh started", MatToastType.Info);
            foreach (var student in students)
            {
                var profileKey = $"admin/students/profile/{student.Id}";
                await localStorage.RemoveItemAsync(profileKey);
            }

            await Load();
            StateHasChanged();
            Toaster.Add("Refresh success", MatToastType.Success);
        }
        catch(Exception e)
        {
            Toaster.Add($"Refresh error:{e.Message}", MatToastType.Danger);
        }
    }
    async Task Load()
    {
        try
        {
            var tempStudents = (await localStorage.GetItemAsync<IEnumerable<SelfService.Shared.Student>>("admin/students"));
            if( tempStudents == null)
            {
                System.Console.WriteLine("Loading from resource");
                tempStudents = (await Http.GetFromJsonAsync<IEnumerable<SelfService.Shared.Student>>("admin/students"));
                await localStorage.SetItemAsync("admin/students", tempStudents);
            }
            else{
                System.Console.WriteLine("Loading from local storage");
            }

            tempStudents = tempStudents.ToList();

            foreach(var student in tempStudents )
            {
                student.Profile = await GetProfile(student.Id);
            }

            students = tempStudents.OrderBy(s => s.Name);
        }
        catch (System.Exception e)
        {
            error = e.Message;
        }
    }

    void AddPointsToStudent(string id, string name)
    {
        NavigationManager.NavigateTo($"addstudentpoints/{id}/{name}");
    }

    async Task RefreshStudentProfile(string id)
    {
        var profileKey = $"admin/students/profile/{id}";
        await localStorage.RemoveItemAsync(profileKey);
        var profile = await GetProfile(id);
        var student = students.FirstOrDefault(s => s.Id == id);
        var modifiedStudents = students.ToList();
        modifiedStudents.Remove(student);
        modifiedStudents.Add(student);
        students = modifiedStudents;
    }

    async Task<ProfileResource> GetProfile(string id)
    {
        var profileKey = $"admin/students/profile/{id}";
        var profile = await localStorage.GetItemAsync<ProfileResource>(profileKey);
        if( profile == null)
        {
            profile = await Http.GetFromJsonAsync<ProfileResource>(profileKey);
            await localStorage.SetItemAsync(profileKey, profile);
        }

        return profile;
    }
}