@using SelfService.Shared
@using System.Linq
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<MatButton OnClick="@Refresh" style="float: right">Refresh</MatButton>
<br/>
<br/>
@if( error != null){
    <span>@error</span>
}
@if (students == null){
    <em>Loading Students...</em>
}
else{
        <MatAccordion Multi="true">
            @foreach(var student in students){
                <MatExpansionPanel>
                    <MatExpansionPanelSummary>
                        <MatExpansionPanelHeader>@student.Name</MatExpansionPanelHeader>
                    </MatExpansionPanelSummary>
                    <MatExpansionPanelDetails>
                        <MatButton OnClick="@(e => RefreshProfile(@student.Id))" style="float: right">Refresh</MatButton>
                        <MatButton OnClick="@(e => AddPointsToStudent(@student.Id,@student.Name))" style="float: right">Add/View Points</MatButton>
                        <ProfileView Profile="@student.Profile" />
                    </MatExpansionPanelDetails>
                </MatExpansionPanel>            
            }         
        </MatAccordion>
}

@code {
    IEnumerable<SelfService.Shared.Student> students;
    AddStudentPoints addStudentPoints = new AddStudentPoints();

    string error = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Refresh();
        }
        catch (Microsoft.AspNetCore.Components.WebAssembly.Authentication.AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

    }

    async Task Refresh()
    {
        try
        {
            var tempStudents = (await localStorage.GetItemAsync<IEnumerable<SelfService.Shared.Student>>("admin/students"));
            if( tempStudents == null)
            {
                System.Console.WriteLine("Loading from resource");
                tempStudents = (await Http.GetFromJsonAsync<IEnumerable<SelfService.Shared.Student>>("admin/students"));
                await localStorage.SetItemAsync("admin/students", tempStudents);
            }
            else{
                System.Console.WriteLine("Loading from local storage");
            }

            tempStudents = tempStudents.ToList();

            foreach(var student in tempStudents )
            {
                var profileKey = $"admin/students/profile/{student.Id}";
                var profile = await localStorage.GetItemAsync<ProfileResource>(profileKey);
                if( profile == null)
                {
                    profile = await Http.GetFromJsonAsync<ProfileResource>(profileKey);
                    await localStorage.SetItemAsync(profileKey, profile);
                }

                student.Profile = profile;
            }

            students = tempStudents.OrderBy(s => s.Name);
        }
        catch (System.Exception e)
        {
            error = e.Message;
        }
    }

    void AddPointsToStudent(string id, string name)
    {
        NavigationManager.NavigateTo($"addstudentpoints/{id}/{name}");
    }

    async Task RefreshProfile(string id)
    {
        try
        {
            var profileKey = $"admin/students/profile/{id}";
            var profile = await Http.GetFromJsonAsync<ProfileResource>(profileKey);
            await localStorage.SetItemAsync(profileKey, profile);
            var student = students.FirstOrDefault(s => s.Id == id);
            student.Profile = profile;
            students = students.ToList();
        }
        catch (System.Exception e)
        {
            error = e.Message;
        }
        finally{
            StateHasChanged();
        }
    }
}