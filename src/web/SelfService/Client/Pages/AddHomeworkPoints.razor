@page "/addhomeworkpoints"
@using SelfService.Shared
@attribute [Microsoft.AspNetCore.Authorization.Authorize()]
@inject HttpClient Http
@inject IMatToaster Toaster

@if( error != null){
    <span><em>@error</em></span>
}
@if(homeworkPoints == null){
    <span><em>Loading...</em></span>
}
else{
    <br/>
    <MatButton OnClick="@OnAdd" style="float: left">Add</MatButton>
<MatTable Items="@homeworkPoints" class="mat-elevation-z5" ShowPaging=false PageSize=20 Striped=true>
    <MatTableHeader>
                <th></th>
                <th>Order Id</th>
                <th>Description&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                <th>Category</th>
                <th>Number of Points&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
            </MatTableHeader>
            <MatTableRow>
                <td><MatButton Icon="delete" OnClick="@(e => OnRemove(@context.Id))" style="float: left"></MatButton></td>
                <td>@context.NumberId</td>
                <td>@context.Description</td>
                 <td>@context.Category</td>
                <td>@context.NumberofPoints</td>
            </MatTableRow>
        </MatTable>

<MatDialog @bind-IsOpen="@dialogIsOpen">
            <MatDialogTitle>Add Homework</MatDialogTitle>
            <MatDialogContent>
                <MatTextField Label="Description" @bind-Value="@description"></MatTextField>  
                <br/>              
                <MatTextField Label="Category" @bind-Value="@category"></MatTextField>  
                <br/>              
                <MatTextField Label="Order" @bind-Value="@orderId"></MatTextField>  
                <br/>              
<MatNumericUpDownField Label="Number Of Points"
                                   @bind-Value=@numberofPoints
                                   DecimalPlaces=0
                                   Minimum=1 Maximum=10>
            </MatNumericUpDownField>                            
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="@(e => { dialogIsOpen = false; })">Cancel</MatButton>
                <MatButton OnClick="@OkClick">OK</MatButton>
            </MatDialogActions>
        </MatDialog>        
}

@code{
    bool dialogIsOpen = false;
    string description;
    string category;
    int numberofPoints = 1;
    int orderId = 400;
    IEnumerable<HomeworkPoint> homeworkPoints;
    string error;
    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    async Task OnAdd()
    {
        await Task.Delay(0);
        dialogIsOpen = true;
    }

    async Task OkClick()
    {
        try
        {
            error = string.Empty;
            var homeworkPoint = new HomeworkPoint
            {
                Category = category,
                Description = description,
                NumberofPoints = numberofPoints,
                NumberId = orderId,
            };

            try
            {
                homeworkPoint.Validate();
                var response = await Http.PostAsJsonAsync<HomeworkPoint>($"admin/homeworkpoints", homeworkPoint );
                response.EnsureSuccessStatusCode();
            }
            catch (System.Exception e)
            {
                Toaster.Add(e.Message, MatToastType.Danger);
                return;
            }

            Toaster.Add($"{description} has been added.", MatToastType.Success);
            dialogIsOpen = false;
            await Refresh();
        }
        catch (System.Exception e)
        {
            Toaster.Add(e.Message, MatToastType.Danger);
            System.Console.WriteLine(e.Message);
            error = e.Message;
        }
    }

    async Task Refresh()
    {
        try
        {
            homeworkPoints = (await Http.GetFromJsonAsync<IEnumerable<HomeworkPoint>>("admin/homeworkpoints"))
                .OrderBy(p => p.NumberId);
        }
        catch (System.Exception e)
        {
            error = e.Message;
        }
    }

    async Task OnRemove(string id)
    {
        try
        {
            System.Console.WriteLine($"removing {id}");
            var response = await Http.DeleteAsync($"admin/homeworkpoints/{id}");
            response.EnsureSuccessStatusCode();
            await Refresh();
        }
        catch (System.Exception e)
        {
            error = e.Message;
        }
    }
}