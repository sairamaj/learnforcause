@page "/classattendance"
@using SelfService.Shared
@attribute [Microsoft.AspNetCore.Authorization.Authorize()]
@inject HttpClient Http
@inject IMatToaster Toaster

@if( error != null){
    <span><em>@error</em></span>
}
@if(classes == null){
    <span><em>Loading...</em></span>
}
else{

        <MatAccordion Multi="true">
            @foreach(var programClass in classes){
                <MatExpansionPanel>
                    <MatExpansionPanelSummary>
                        <MatExpansionPanelHeader>

<div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">@programClass.ClassInfo.FriendlyDate</div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">@programClass.ClassInfo.ClassName</div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">@programClass.Students.Count()</div>
            </div>
        </div>                            
                            </MatExpansionPanelHeader>
                    </MatExpansionPanelSummary>
                    <MatExpansionPanelDetails>
                            <MatButton Raised=true OnClick="@( ()=> OnRefresh(@programClass))" style="float: right">Refresh</MatButton>
                            <div>
                                <MatTable Items="@programClass.Students" class="mat-elevation-z5" ShowPaging=false PageSize=20 Striped=true>
                                        <MatTableRow>
                                            <td>@context</td>
                                        </MatTableRow>
                                    </MatTable>
                                    </div>
                    </MatExpansionPanelDetails>
                </MatExpansionPanel>            
            }         
        </MatAccordion>

}

@code
{
    IEnumerable<ClassStudentInfo> classes;
    string error;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var tempClasses = (await Http.GetFromJsonAsync<IEnumerable<ClassInfo>>("admin/classes"))
                .OrderByDescending(c => c.DateTime)
                .Select(c => new ClassStudentInfo
                {
                    ClassInfo = c,
                    Students = new List<string>{}
                }).ToList();

            @* var lastClass = tempClasses.FirstOrDefault();
            if( lastClass != null){
                    lastClass.Students = await GetStudents(lastClass);
            } *@
            foreach(var tempClass in tempClasses){
                tempClass.Students = await GetStudents(tempClass);
            }

            classes = tempClasses.ToList();
            foreach(var c in classes)
            {
                System.Console.WriteLine($"{c.Students.Count()}");
            }
        }
        catch (System.Exception e)
        {
            error = e.ToString();
        }
        finally{
            //StateHasChanged();
        }
    }

    async Task OnRefresh(ClassStudentInfo info)
    {
        info.Students = await GetStudents(info);
    }

    async Task<IEnumerable<string>> GetStudents(ClassStudentInfo info)
    {
        System.Console.WriteLine($"Class id: {info.ClassInfo.Id}");

        var students = (await Http.GetFromJsonAsync<IEnumerable<string>>($"admin/classes/{info.ClassInfo.Id}")).ToList();
        foreach (var s in students)
        {
            System.Console.WriteLine($"student: {s}");
        }
        
        return students;
    }

    class ClassStudentInfo
    {
        public ClassInfo ClassInfo { get; set; }
        public IEnumerable<string> Students { get; set; }
    }

}